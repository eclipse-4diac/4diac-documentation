= Step 4 - Create Your own Function Block Types
:lang: en

[[topOfPage]]
== Step 4 - Create Your own Function Block Types

This page is part of a guide that gives a walk-through of the major
4diac IDE features.

[start=0]
. link:../../html/4diacIDE/overview.html[4diac IDE Overview]
. link:../../html/4diacIDE/use4diacLocally.html[Use 4diac Locally
(Blinking tutorial)]
. link:../../html/4diacIDE/distribute4diac.html[Distribute 4diac
Applications]
. link:../../html/4diacIDE/use4diacRemotely.html[Deploy Applications
Remotely]
. Create Your own Function Block Types (YOU ARE HERE!)
. link:../../html/4diacIDE/otherUseful.html[Other Basic Features]
. link:../../html/4diacIDE/advancedFeatures.html[Advanced Features]
. link:../../html/4diacIDE/dynamicTypeLoader.html[Deploying new FBs with
the Dynamic Type Loader]

In this tutorial, you will learn how to create your own Function Block
(FB). There are several different types of Function Blocks, we will show
how to create a Basic, a Simple, a Composite and a Service Function
Block. The new FBs are then available in the FB Palette for use in the
Applications of the System.

New FBs need to be created when the desired functionality doesn't exist
as a library FB or multiple FBs should be combined into just one FB.
First, you have to define the interface with its input and output events
and data. Afterwards, define the FB internals, which are defined by the
kind of FB.

We implement the Blinking functionality inside all three different FB
types to introduce their creation process. All four types do the same
thing in different ways. At an event input, the Boolean data output will
be toggled and the event output will message that the value has changed.

Create a new Function Block by selecting: +
*[.button4diac]#File → New → New Type#*

[[createBasic]]
=== Create a Basic Function Block

Follow the instructions in the creation wizard. For this tutorial,
select BlinkTest as the parent folder. Choose a name for the new FB, we
name it _BasicTest_. Afterwards, select the type of FB you want to
create, in this case we choose _TemplateBasic_. The *Function Block Type
Editor (FBT Editor)* opens after clicking Finish.

image:../../html/4diacIDE/img/Step4/newTypeWizardBasic.png[New Type
Wizard - Create a Basic Function Block]

. Your newly created type appears in the Type Library of your System
BlinkTest.
. The central editing area shows the FB part you are currently working
on. Initially, it shows the interface of the Function Block.
. The Palette shows all elements you can add to the FB interface.
. The tabs below the central editing area identify the current part of
the Function Block you're editing. The picture shows the selected
Interface tab.
. The properties below show the information about the Function Block.

image:../../html/4diacIDE/img/Step4/typeBasicGeneral.png[General View
after Creating a Basic Function Block]

[[changeInterface]]
==== Change the Interface

The TemplateBasic FB already has some inputs and outputs which are
commonly used. If you need another, just drag and drop it from the
Palette into the FB or right-click at the FB to set another input or
output. Of course you can also delete them by pressing the Delete key or
right-click → Delete.

In this example, we are doing a Blinking Function Block. This should
have then one input event that triggers the change, one output event as
an indicator of a change, and a Boolean data output for the state. +
By default, the Boolean output is set to _false_ and remembers the state
until a new event comes in and converts the Boolean to _true_ until the
next input arrives. +
Right now, the TemplateBasic FB has more inputs and outputs than we
need.

. Select the INIT event, and delete it. Do the same for QI and INITO.
. Select the QO output, and change its name to STATE by either
double-clicking on it, or in the Properties below. You can change the
Comment for each event and data also in the Properties.
. Check that the Type of STATE is BOOL in Properties.
. Check the lines between events and data which represent the WITH. They
indicate which data outputs are refreshed when an Event occurs.
Similarly work event and data inputs, but in this case there's no data
input to refresh. Since the STATE is changed when CNF is triggered,
there's a WITH line between them.
. Try and add Events and different types of Data input and outputs to
the interface to play around from the Palette. Finally, leave it again
as in the image.

image:../../html/4diacIDE/img/Step4/createBasicInterface.png[Create
Basic Type - Interface]

[[changeECC]]
==== Change the ECC

Select the *ECC (Execution Control Chart) tab* at the bottom of the
central editing area, and you will see a state machine graph. This is
the default one, and here's where you actually code the behavior of the
Function Block. Purple boxes are states (the initial one is
double-framed), the yellow ones represent the Algorithms that are
executed when the Function Block enters the state, and the green ones
are the triggered events after the algorithm. The arrows between them
represent Events that arrive at the Function Block. Conditions are
assigned to these arrows. A "1" means that it will always change state
after the algorithm. Events are consumed only one at a time. The small
numbers at the beginning of the transition are the priorities, in case
more than one transition is possible. Don't try to understand everything
at once. With a little practice, the terms and concepts become clearer.

. Select and delete everything (Click and Drag) but the _START_ state.
. Add a State from the Palette on the right by Drag and Drop from the
Palette. Change its name to _On_ by either double-clicking on it, or
selecting and then editing the Properties below.
. Add another State and name it _Off_.
. Add an Action to the state _On_ via Drag and Drop from the Palette or
right click → Add Action.
. Select nothing by clicking in the background of the central editing
area, then select the Algorithms tab in Property view. Here you see all
the default algorithms of the Function Block. Delete them all by
selecting and clicking the red cross, since we don't use them in this
example.
. Add one algorithm by clicking on the green plus. Select the name and
change it to _turnOn_. +
Depending on the selected algorithm type, different algorithm editors
are provided. Currently, the most used algorithm language is IEC 61131-3
Structured Text (ST). The ST Editor provides syntax highlighting and
code completion. We'll see later that this code is converted to
4diac FORTE code. If you select AnyText, no conversion is done, so you
should know the syntax for 4diac FORTE (or other runtime environment).
+
On the right side, you can write your code. As the name implies, in the
_turnOn_ algorithm we set your STATE variable to TRUE. Using the name of
the Data Output (or input or internal variable), you access its value
for reading and writing.
+
STATE := TRUE;
+
 +
image:../../html/4diacIDE/img/Step4/addAlgorithm.png[Add an Algorithm to
the Action]
. Double-click on the yellow box of the action of the _On_ state and
select the _turnOn_ algorithm. Alternatively, you can also select this
in the Property view.
. Double-click on the green box of the action of the _On_ state and
select the _CNF_ output event. Alternatively, you can also select this
in the Property view.
. Add another algorithm by clicking on the green plus. Select the name
and change it to _turnOff_. As the name implies, in the _turnOff_
algorithm we set your STATE variable to FALSE.
+
STATE := FALSE;
. Double-click on the yellow box of the action of the _Off_ state and
select the _turnOff_ algorithm.
. Double-click on the green box of the action of the _Off_ state and
select the _CNF_ output event. +
image:../../html/4diacIDE/img/Step4/stateAndActions.png[Current score of
the States And Actions]
. Draw a transition via Drag and Drop from the _START_ to the state
_On_. Select it, and in the transition tab of the Properties view select
the condition _REQ_. Next to it, you have the possibility to add a
condition (for example, if STATE == TRUE or similar). In this example,
no condition except the _REQ_ event is needed.
. Draw a transition by Drag and Drop from the state _On_ to the state
_Off_. Select it, and in the transition tab of the Properties view
select the condition _REQ_.
. Draw a transition by Drag and Drop from the state _Off_ to the state
_On_. Select it, and in the transition tab of the Properties view select
the condition _REQ_.

image:../../html/4diacIDE/img/Step4/createBasicECC.png[Basic ECC
example]

At the beginning, the FB is in the START state. When a REQ event
arrives, it jumps to the _On_ state, executes algorithm _turnOn_ and
triggers the _CNF_ output event. When the next event arrives, it jumps
to _Off_ state, executes algorithm _turnOff_ and triggers the _CNF_
output event. That's how the ECC works.

In case the transition with a "1" had also a REQ event, an infinite loop
won't happen since the event is consumed only once. You would need to
REQ events to go back.

link:#exportTypes[Exporting] the Function Block and
link:#testFunctionBlock[testing] are presented after the chapter Create
a link:#createComposite[Composite] and link:#createService[Service]
Function Block.

[[createSimple]]
=== Create a Simple Function Block

The Simple FB has only one algorithm and no ECC.

Create a new Type by following the instructions in the creation wizard.
For this tutorial, select BlinkTest as the parent folder. Choose a name
for the new FB, we name it _SimpleTest_. Afterwards, select the type of
FB you want to create, in this case we choose _Simple_. The _Function
Block Type Editor (FBT Editor)_ is opening after clicking Finish.

image:../../html/4diacIDE/img/Step4/newTypeWizardSimple.png[New Type
Wizard - Create a Simple Function Block]

. Change the interface as link:#changeInterface[before]. +
image:../../html/4diacIDE/img/Step4/createSimpleInterface.png[Create
Simple Type - Interface]
. Select the *Algorithm tab* at the bottom of the central editing area.
In this view, you can define an algorithm of the Simple FB.
+
image:../../html/4diacIDE/img/Step4/createSimpleFBAlgorithm.png[Simple
FB Algorithm example]

That's all you need to do for the Simple Function Block.

[[createComposite]]
=== Create a Composite Function Block

Create a new Type following the instructions in the creation wizard. For
this tutorial, select BlinkTest as the parent folder. Choose a name for
the new FB, we name it _CompositeTest_. Afterwards, select the type of
FB you want to create, in this case we choose _Composite_. The _Function
Block Type Editor (FBT Editor)_ is opening after clicking Finish.

image:../../html/4diacIDE/img/Step4/newTypeWizardComposite.png[New Type
Wizard - Create a Composite Function Block]

. Change the interface as link:#changeInterface[before]. +
image:../../html/4diacIDE/img/Step4/createCompositeInterface.png[Create
Composite Type - Interface]
. Select the *Composite Network tab* at the bottom of the central
editing area. In this view, you can create your own network of FBs
inside the Function Block. For this example, use the E_SWITCH and E_SR
and connect them as in the original Blink example.
. On the edges of the central editing area, you can see events and data
that correspond to the interface of the Composite. Connect them as in
the image below.
+
image:../../html/4diacIDE/img/Step4/createCompositeNetwork.png[Composite
Network example]

That's all you need to do for the Composite Function Block.

[[createService]]
=== Create a Service Function Block

Create a new Type by following the instructions in the creation wizard.
For this tutorial, select BlinkTest as the parent folder. Choose a name
for the new FB, we name it _ServiceInterfaceTest_. Select then the type
of FB you want to create, in this case we choose _Service Interface_.
The _Function Block Type Editor (FBT Editor)_ opens after clicking
Finish.

image:../../html/4diacIDE/img/Step4/newTypeWizardServiceInterface.png[New
Type Wizard - Create a Service Interface Function Block]

Change the interface as link:#changeInterface[before].

 +
image:../../html/4diacIDE/img/Step4/createServiceInterfaceInterface.png[Create
Service Interface Type - Interface]

That's it. The behavior of the Service Function Block must be
implemented directly in the code that's generated from it. You will need
to implement the functionality for each incoming event, manage the
internal variables and send output events by yourself after exporting.
link:#finishService[Below], you find the code for this example.

[[exportTypes]]
=== Export Function Block Types

4diac IDE provides an export filter to generate C++ code which can be
included in the 4diac FORTE development process. In order to export a
Function Block Type, either

* select File → Export → 4diac IDE → 4diac IDE Type Export → Next
* right-click on the Function Block to export and select Export →
4diac IDE → 4diac Type Export

image:../../html/4diacIDE/img/Step4/selectExportType.png[Select Export
Type]

Select the FBs to be exported on the right side of the wizard. It makes
sense to use your own folder, we choose
[.fileLocation]#ext_modules/EXAMPLE_TEST#. Before exporting one or more
Function Block Types, the Export Destination and the Exporter (FORTE 1.x
NG) have to be chosen. We'll export the four Function Block Types we
just created.

You can select the option [.specificText]#Export CMakeLists.txt# to
create a configuration file for the forte-build-process. This will use
the name of the folder to which the files were exported as the module
name and include all .c, .cpp and .h files in that folder. If you need
more control, you can manually create the configuration file.

[.inlineTitle]#Attention:# Make sure that not all FBs are checked,
otherwise all existing FBs will be exported!

image:../../html/4diacIDE/img/Step4/export4DIACTypeWizard.png[Export
Type Wizard]

After clicking the button Finish and no warning pop up everything went
fine. Your exported FBs are in the folder you chose before. +
If a dialog window pops up, something went wrong and it will inform you
that the export to the 4diac FORTE C++ format was not successful.

If the output directory already contains an older version of the
exported Function Block Type, it is possible to overwrite the old file
or to open a Merge Editor, where manual merges can be performed.

image:../../html/4diacIDE/img/Step4/exportMergeWindow.png[Export Merge
Window,width=1024]

[[finishService]]
==== Finish the Service Interface Test

Now that you have exported the Service Interface Function Block, you
need to edit it in order to get the desired behavior. Open the
ServiceInterfaceTest.cpp file that was recently exported, and take a
look at the executeEvent function at the bottom.

void FORTE_ServiceInterfaceTest::executeEvent(TEventID paEIID,
CEventChainExecutionThread *const paECET)\{ switch(paEIID)\{ case
scm_nEventREQID: #error add code for REQ event! /* do not forget to send
output event, calling e.g. sendOutputEvent(scm_nEventCNFID, paECET); */
break; } }

The comment reminds us to set an output event, replace _#error add code
for REQ event!_ with _st_STATE() = !st_STATE();_ for the toggling
effect.

void FORTE_ServiceInterfaceTest::executeEvent(TEventID paEIID,
CEventChainExecutionThread *const paECET)\{ switch(paEIID)\{ case
scm_nEventREQID: st_STATE() = !st_STATE();
sendOutputEvent(scm_nEventCNFID, paECET); break; } }

To get or set an internal variable or data input in the 4diac FORTE
template, you use the name and the parentheses. The sendOutputEvent is
the specific function to send output events.

[[OtherEditors]]
=== Other Type Editors

Currently, only the management (i.e. creation, deletion and
modification) of the Basic, Simple, Composite, Service Interface and Sub
Application (SubApp) Function Block types as well as Adapter types are
supported. The management of Device and Resource types is currently not
supported.

[[testFunctionBlock]]
=== Test Function Block

The *FBTester tab* at the bottom of the central editing area is
available for all Function Blocks. It allows testing the functionality
of a Function Block by executing it on a target device. But first,
4diac FORTE must know about these FBs. So, you need to build 4diac FORTE
using these Function Blocks just created. A guide to build your own
4diac FORTE is link:../../html/installation/install.html#ownFORTE[here].
See the section "Add external modules" on adding the files for
compilation.

Once compiled, you can go to the FBTester, select 4diac FORTE Remote
Tester in Test Configuration, and then set the IP and PORT for the
4diac FORTE that was compiled with the Function Blocks to be tested. The
default is locally, but you can test them on any reachable 4diac FORTE.

Press Start Testing FB, and the FB will be loaded into 4diac FORTE, and
you can manually set input values of your FB, trigger input events and
inspect the resulting output events and output data. Furthermore. you
can store input/output sequences and execute them to automatically test
a certain functionality of your FB.

image:../../html/4diacIDE/img/Step4/functionBlockTester.png[Functionblock
Tester,width=1024]

== Where to go from here?

In the next step you will see other basic features

link:../../html/4diacIDE/otherUseful.html[Step 5 - Other Basic Features]

If you want to go back to the distributed application running remotely,
here's a link

link:../../html/4diacIDE/use4diacRemotely.html[Step 3 - Deploy
Applications Remotely]

If you want to go back to the Start Here page, we leave you here a fast
access

xref:../index.adoc[Where to Start]

link:#topOfPage[Go to top]
